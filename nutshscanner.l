%{
// Generated by Bison
#include "nutshparser.tab.h"
#include <string.h>
#include <iostream>
#include "global.h"

std::map<std::string, std::string> aliasTable;
std::string decipherAlias(std::string aliasText){
	if(aliasTable.count(aliasText) > 0){
		return decipherAlias(aliasTable[aliasText]);
	}
	return aliasText;
}
//y = std::string(getenv(yytext)); char c[100]; strcpy(c, y.substr(2, y.size()-1).c_str()); 
//\$\{{CHAR}+\}	{std::string y = std::string(getenv(yytext)); std::cout<<y<<"\n"; yylval.string = strdup("ls"); return WORD;}
%}
%array
%option noyywrap
%x string_condition

CHAR            [.A-Za-z0-9!\/_-][.A-Za-z0-9!\/_-]*
ANYCHAR            [)(*&%$#@!`;,\.a-zA-Z0-9'/*_=~ -][)(*&%$#@!`;,\.a-zA-Z0-9'/*_=~ -]*

%%

<string_condition>{ANYCHAR}+     { yylval.string = strdup(yytext); return WORD;}
<string_condition>[\"]          {BEGIN(INITIAL);}


[ ]		    { }
bye			{exit(1); return 0;}
setenv		{return SETENV;}
printenv	{return PRINTENV;}
unsetenv	{return UNSETENV;}
alias		{return ALIAS;}
unalias		{return UNALIAS;}
cd			{return CD;}
"\n"		{return NEWLINE;}
[\"]        { BEGIN(string_condition); }
\$\{{CHAR}+\}	{auto y = std::string(yytext); yylval.string = strdup(getenv(y.substr(y.find("${")+2, y.find('}')-2).c_str())); return WORD;}
{CHAR}+		{yylval.string = strdup(yytext); return WORD;}
