%{
// Generated by Bison
#include "nutshparser.tab.h"
#include <string.h>

#ifdef DOESNT_HAVE_STRDUP
#warning DOESNT_HAVE_STRDUP
char *strdup(const char *s);
#endif

%}
%option noyywrap
%x EXPECT_STRING

DIGIT	[0-9]
META	[\<\>\|\"\\\&]

%%

"\n"	{return NEWLINE;}

setenv		{return SETENV}
printenv	{return PRINTENV;}
cd			{return CD;}
bye			{exit(1); return 0;}
[a-z]+		{yylval.string = strdup(yytext); return WORD;}

	/*
	This one's a bit weird - instead of defining a lot of different tokens
	for meta-characters, we can define them all according to their ASCII
	value. This lets us use single-character literals as tokens in Bison!
	So what we're doing here is casting the first (and only) character of
	yytext to an int, and returning that - it gives us the character's ASCII
	value.
	*/
{META}	return (int) yytext[0];

	/*
	A catch-all that's not used in any parser rules, but gives undefined
	characters special attention. Not actually necessary.
	*/
.		return UNDEFINED;
