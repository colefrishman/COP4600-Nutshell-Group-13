%{
// Generated by Bison
#include "nutshparser.tab.h"
#include <string.h>
#include <iostream>
#include "global.h"

std::map<std::string, std::string> nestedAliases;
std::map<std::string, std::string> aliasTable;
std::string decipherAlias(std::string aliasText){
	if(aliasTable.count(aliasText) > 0){
		return decipherAlias(aliasTable[aliasText]);
	}
	return aliasText;
}
void setNestedVal(std::string s)
{
    for (auto it=aliasTable.begin(); it!=aliasTable.end(); ++it)
	{
		
		if (aliasTable[it->first] == s)
		{
			nestedAliases[it->first] = nestedAliases[s];
			setNestedVal(it->first);
		}
	}
}
bool checkCycle(std::string key, std::string val)
{
	for (auto it=aliasTable.begin(); it!=aliasTable.end(); ++it)
	{
		if (key == it->first)
		{
			return checkCycle(it->second, val);
		}
		else if (nestedAliases[val] == key)
		{
			return true;
		}
	}
	return false;
}

bool beginning = true;

void replaceAlias(char* text){
	
}
%}
%array
%option noyywrap
%x string_condition

CHAR            [.A-Za-z0-9!:\/_-][.A-Za-z0-9!:\/_-]*
ANYCHAR            [)(}{*&%$#@!`:;,\.a-zA-Z0-9'/*_=~ -][)(*&%$#@!`:;,\.a-zA-Z0-9'/*_=~ -]*

%%

\$\{{ANYCHAR}+\} {
	std::string y = std::string(yytext);
	char* text = (char*) y.substr(y.find("${")+2, y.find('}')-2).c_str();
	char* env = getenv(text);
	if(env) {
		std::string t = std::string(env);
	    for ( int i = t.length() - 1; i >= 0; --i ){
	     	unput( t[i] );
		}
    }
}

<string_condition>\$\{{ANYCHAR}+\} {
	std::string y = std::string(yytext);
	char* text = (char*) y.substr(y.find("${")+2, y.find('}')-2).c_str();
	char* env = getenv(text);
	if(env) {
		std::string t = std::string(env);
	    for ( int i = t.length() - 1; i >= 0; --i ){
	     	unput( t[i] );
		}
    }
}
<string_condition>{ANYCHAR}+     { yylval.WORD = strdup(yytext); return WORD;}
<string_condition>[\"]          {BEGIN(INITIAL);}


" "		    { beginning = false; }
<<EOF>>		{std::cout<<std::endl; exit(1); return 0;}
"| "		{ beginning = true; return PIPE;}
\|			{ beginning = true; return PIPE;}
"&"			{return AMPERSAND;}
\<			{return LEFTAB;}
\>\>		{return DOUBLERIGHTAB;}
\>			{return RIGHTAB;}
"2>&1"		{return ERRTOOUT;}
"2>"		{return ERRTO;}
bye			{exit(1); return 0;}
setenv		{return SETENV;}
printenv	{return PRINTENV;}
unsetenv	{return UNSETENV;}
alias		{return ALIAS;}
unalias		{return UNALIAS;}
cd			{return CD;}
"\n"		{ beginning = true; return NEWLINE;}
[\"]        { BEGIN(string_condition); }
{CHAR}+		{
	if(beginning && is_alias(yytext)) {
		std::string t = aliasTable[std::string(yytext)]; 
	    for ( int i = t.length() - 1; i >= 0; --i ){
	     	unput( t[i] );
		}
    } else {
		yylval.WORD = strdup(yytext); return WORD;
	}
}
